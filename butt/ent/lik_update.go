// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jeffreycharters/blurt/ent/blurt"
	"github.com/jeffreycharters/blurt/ent/lik"
	"github.com/jeffreycharters/blurt/ent/predicate"
	"github.com/jeffreycharters/blurt/ent/user"
)

// LikUpdate is the builder for updating Lik entities.
type LikUpdate struct {
	config
	hooks    []Hook
	mutation *LikMutation
}

// Where appends a list predicates to the LikUpdate builder.
func (lu *LikUpdate) Where(ps ...predicate.Lik) *LikUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LikUpdate) SetUserID(u uuid.UUID) *LikUpdate {
	lu.mutation.SetUserID(u)
	return lu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lu *LikUpdate) SetNillableUserID(u *uuid.UUID) *LikUpdate {
	if u != nil {
		lu.SetUserID(*u)
	}
	return lu
}

// SetBlurtID sets the "blurt_id" field.
func (lu *LikUpdate) SetBlurtID(u uuid.UUID) *LikUpdate {
	lu.mutation.SetBlurtID(u)
	return lu
}

// SetNillableBlurtID sets the "blurt_id" field if the given value is not nil.
func (lu *LikUpdate) SetNillableBlurtID(u *uuid.UUID) *LikUpdate {
	if u != nil {
		lu.SetBlurtID(*u)
	}
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LikUpdate) SetUser(u *User) *LikUpdate {
	return lu.SetUserID(u.ID)
}

// SetBlurt sets the "blurt" edge to the Blurt entity.
func (lu *LikUpdate) SetBlurt(b *Blurt) *LikUpdate {
	return lu.SetBlurtID(b.ID)
}

// Mutation returns the LikMutation object of the builder.
func (lu *LikUpdate) Mutation() *LikMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LikUpdate) ClearUser() *LikUpdate {
	lu.mutation.ClearUser()
	return lu
}

// ClearBlurt clears the "blurt" edge to the Blurt entity.
func (lu *LikUpdate) ClearBlurt() *LikUpdate {
	lu.mutation.ClearBlurt()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LikUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LikUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LikUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LikUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LikUpdate) check() error {
	if _, ok := lu.mutation.UserID(); lu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lik.user"`)
	}
	if _, ok := lu.mutation.BlurtID(); lu.mutation.BlurtCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lik.blurt"`)
	}
	return nil
}

func (lu *LikUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lik.Table, lik.Columns, sqlgraph.NewFieldSpec(lik.FieldUserID, field.TypeUUID), sqlgraph.NewFieldSpec(lik.FieldBlurtID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.UserTable,
			Columns: []string{lik.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.UserTable,
			Columns: []string{lik.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.BlurtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.BlurtTable,
			Columns: []string{lik.BlurtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blurt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.BlurtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.BlurtTable,
			Columns: []string{lik.BlurtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blurt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lik.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LikUpdateOne is the builder for updating a single Lik entity.
type LikUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikMutation
}

// SetUserID sets the "user_id" field.
func (luo *LikUpdateOne) SetUserID(u uuid.UUID) *LikUpdateOne {
	luo.mutation.SetUserID(u)
	return luo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (luo *LikUpdateOne) SetNillableUserID(u *uuid.UUID) *LikUpdateOne {
	if u != nil {
		luo.SetUserID(*u)
	}
	return luo
}

// SetBlurtID sets the "blurt_id" field.
func (luo *LikUpdateOne) SetBlurtID(u uuid.UUID) *LikUpdateOne {
	luo.mutation.SetBlurtID(u)
	return luo
}

// SetNillableBlurtID sets the "blurt_id" field if the given value is not nil.
func (luo *LikUpdateOne) SetNillableBlurtID(u *uuid.UUID) *LikUpdateOne {
	if u != nil {
		luo.SetBlurtID(*u)
	}
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LikUpdateOne) SetUser(u *User) *LikUpdateOne {
	return luo.SetUserID(u.ID)
}

// SetBlurt sets the "blurt" edge to the Blurt entity.
func (luo *LikUpdateOne) SetBlurt(b *Blurt) *LikUpdateOne {
	return luo.SetBlurtID(b.ID)
}

// Mutation returns the LikMutation object of the builder.
func (luo *LikUpdateOne) Mutation() *LikMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LikUpdateOne) ClearUser() *LikUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// ClearBlurt clears the "blurt" edge to the Blurt entity.
func (luo *LikUpdateOne) ClearBlurt() *LikUpdateOne {
	luo.mutation.ClearBlurt()
	return luo
}

// Where appends a list predicates to the LikUpdate builder.
func (luo *LikUpdateOne) Where(ps ...predicate.Lik) *LikUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LikUpdateOne) Select(field string, fields ...string) *LikUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lik entity.
func (luo *LikUpdateOne) Save(ctx context.Context) (*Lik, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LikUpdateOne) SaveX(ctx context.Context) *Lik {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LikUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LikUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LikUpdateOne) check() error {
	if _, ok := luo.mutation.UserID(); luo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lik.user"`)
	}
	if _, ok := luo.mutation.BlurtID(); luo.mutation.BlurtCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lik.blurt"`)
	}
	return nil
}

func (luo *LikUpdateOne) sqlSave(ctx context.Context) (_node *Lik, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lik.Table, lik.Columns, sqlgraph.NewFieldSpec(lik.FieldUserID, field.TypeUUID), sqlgraph.NewFieldSpec(lik.FieldBlurtID, field.TypeUUID))
	if id, ok := luo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Lik.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := luo.mutation.BlurtID(); !ok {
		return nil, &ValidationError{Name: "blurt_id", err: errors.New(`ent: missing "Lik.blurt_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !lik.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.UserTable,
			Columns: []string{lik.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.UserTable,
			Columns: []string{lik.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.BlurtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.BlurtTable,
			Columns: []string{lik.BlurtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blurt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.BlurtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   lik.BlurtTable,
			Columns: []string{lik.BlurtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blurt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lik{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lik.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
