// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/jeffreycharters/blurt/ent/blurt"
	"github.com/jeffreycharters/blurt/ent/schema"
	"github.com/jeffreycharters/blurt/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	blurtMixin := schema.Blurt{}.Mixin()
	blurtMixinFields0 := blurtMixin[0].Fields()
	_ = blurtMixinFields0
	blurtFields := schema.Blurt{}.Fields()
	_ = blurtFields
	// blurtDescCreateTime is the schema descriptor for create_time field.
	blurtDescCreateTime := blurtMixinFields0[0].Descriptor()
	// blurt.DefaultCreateTime holds the default value on creation for the create_time field.
	blurt.DefaultCreateTime = blurtDescCreateTime.Default.(func() time.Time)
	// blurtDescUpdateTime is the schema descriptor for update_time field.
	blurtDescUpdateTime := blurtMixinFields0[1].Descriptor()
	// blurt.DefaultUpdateTime holds the default value on creation for the update_time field.
	blurt.DefaultUpdateTime = blurtDescUpdateTime.Default.(func() time.Time)
	// blurt.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	blurt.UpdateDefaultUpdateTime = blurtDescUpdateTime.UpdateDefault.(func() time.Time)
	// blurtDescContent is the schema descriptor for content field.
	blurtDescContent := blurtFields[1].Descriptor()
	// blurt.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	blurt.ContentValidator = func() func(string) error {
		validators := blurtDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// blurtDescID is the schema descriptor for id field.
	blurtDescID := blurtFields[0].Descriptor()
	// blurt.DefaultID holds the default value on creation for the id field.
	blurt.DefaultID = blurtDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
