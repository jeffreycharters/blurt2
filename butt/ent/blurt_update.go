// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jeffreycharters/blurt/ent/blurt"
	"github.com/jeffreycharters/blurt/ent/predicate"
	"github.com/jeffreycharters/blurt/ent/user"
)

// BlurtUpdate is the builder for updating Blurt entities.
type BlurtUpdate struct {
	config
	hooks    []Hook
	mutation *BlurtMutation
}

// Where appends a list predicates to the BlurtUpdate builder.
func (bu *BlurtUpdate) Where(ps ...predicate.Blurt) *BlurtUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdateTime sets the "update_time" field.
func (bu *BlurtUpdate) SetUpdateTime(t time.Time) *BlurtUpdate {
	bu.mutation.SetUpdateTime(t)
	return bu
}

// SetContent sets the "content" field.
func (bu *BlurtUpdate) SetContent(s string) *BlurtUpdate {
	bu.mutation.SetContent(s)
	return bu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bu *BlurtUpdate) SetNillableContent(s *string) *BlurtUpdate {
	if s != nil {
		bu.SetContent(*s)
	}
	return bu
}

// AddLikdUserIDs adds the "likd_users" edge to the User entity by IDs.
func (bu *BlurtUpdate) AddLikdUserIDs(ids ...uuid.UUID) *BlurtUpdate {
	bu.mutation.AddLikdUserIDs(ids...)
	return bu
}

// AddLikdUsers adds the "likd_users" edges to the User entity.
func (bu *BlurtUpdate) AddLikdUsers(u ...*User) *BlurtUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.AddLikdUserIDs(ids...)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (bu *BlurtUpdate) SetAuthorID(id uuid.UUID) *BlurtUpdate {
	bu.mutation.SetAuthorID(id)
	return bu
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (bu *BlurtUpdate) SetNillableAuthorID(id *uuid.UUID) *BlurtUpdate {
	if id != nil {
		bu = bu.SetAuthorID(*id)
	}
	return bu
}

// SetAuthor sets the "author" edge to the User entity.
func (bu *BlurtUpdate) SetAuthor(u *User) *BlurtUpdate {
	return bu.SetAuthorID(u.ID)
}

// Mutation returns the BlurtMutation object of the builder.
func (bu *BlurtUpdate) Mutation() *BlurtMutation {
	return bu.mutation
}

// ClearLikdUsers clears all "likd_users" edges to the User entity.
func (bu *BlurtUpdate) ClearLikdUsers() *BlurtUpdate {
	bu.mutation.ClearLikdUsers()
	return bu
}

// RemoveLikdUserIDs removes the "likd_users" edge to User entities by IDs.
func (bu *BlurtUpdate) RemoveLikdUserIDs(ids ...uuid.UUID) *BlurtUpdate {
	bu.mutation.RemoveLikdUserIDs(ids...)
	return bu
}

// RemoveLikdUsers removes "likd_users" edges to User entities.
func (bu *BlurtUpdate) RemoveLikdUsers(u ...*User) *BlurtUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.RemoveLikdUserIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (bu *BlurtUpdate) ClearAuthor() *BlurtUpdate {
	bu.mutation.ClearAuthor()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlurtUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlurtUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlurtUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlurtUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BlurtUpdate) defaults() {
	if _, ok := bu.mutation.UpdateTime(); !ok {
		v := blurt.UpdateDefaultUpdateTime()
		bu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlurtUpdate) check() error {
	if v, ok := bu.mutation.Content(); ok {
		if err := blurt.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Blurt.content": %w`, err)}
		}
	}
	return nil
}

func (bu *BlurtUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blurt.Table, blurt.Columns, sqlgraph.NewFieldSpec(blurt.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.SetField(blurt.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Content(); ok {
		_spec.SetField(blurt.FieldContent, field.TypeString, value)
	}
	if bu.mutation.LikdUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blurt.LikdUsersTable,
			Columns: blurt.LikdUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedLikdUsersIDs(); len(nodes) > 0 && !bu.mutation.LikdUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blurt.LikdUsersTable,
			Columns: blurt.LikdUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LikdUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blurt.LikdUsersTable,
			Columns: blurt.LikdUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blurt.AuthorTable,
			Columns: []string{blurt.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blurt.AuthorTable,
			Columns: []string{blurt.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blurt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlurtUpdateOne is the builder for updating a single Blurt entity.
type BlurtUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlurtMutation
}

// SetUpdateTime sets the "update_time" field.
func (buo *BlurtUpdateOne) SetUpdateTime(t time.Time) *BlurtUpdateOne {
	buo.mutation.SetUpdateTime(t)
	return buo
}

// SetContent sets the "content" field.
func (buo *BlurtUpdateOne) SetContent(s string) *BlurtUpdateOne {
	buo.mutation.SetContent(s)
	return buo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (buo *BlurtUpdateOne) SetNillableContent(s *string) *BlurtUpdateOne {
	if s != nil {
		buo.SetContent(*s)
	}
	return buo
}

// AddLikdUserIDs adds the "likd_users" edge to the User entity by IDs.
func (buo *BlurtUpdateOne) AddLikdUserIDs(ids ...uuid.UUID) *BlurtUpdateOne {
	buo.mutation.AddLikdUserIDs(ids...)
	return buo
}

// AddLikdUsers adds the "likd_users" edges to the User entity.
func (buo *BlurtUpdateOne) AddLikdUsers(u ...*User) *BlurtUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.AddLikdUserIDs(ids...)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (buo *BlurtUpdateOne) SetAuthorID(id uuid.UUID) *BlurtUpdateOne {
	buo.mutation.SetAuthorID(id)
	return buo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (buo *BlurtUpdateOne) SetNillableAuthorID(id *uuid.UUID) *BlurtUpdateOne {
	if id != nil {
		buo = buo.SetAuthorID(*id)
	}
	return buo
}

// SetAuthor sets the "author" edge to the User entity.
func (buo *BlurtUpdateOne) SetAuthor(u *User) *BlurtUpdateOne {
	return buo.SetAuthorID(u.ID)
}

// Mutation returns the BlurtMutation object of the builder.
func (buo *BlurtUpdateOne) Mutation() *BlurtMutation {
	return buo.mutation
}

// ClearLikdUsers clears all "likd_users" edges to the User entity.
func (buo *BlurtUpdateOne) ClearLikdUsers() *BlurtUpdateOne {
	buo.mutation.ClearLikdUsers()
	return buo
}

// RemoveLikdUserIDs removes the "likd_users" edge to User entities by IDs.
func (buo *BlurtUpdateOne) RemoveLikdUserIDs(ids ...uuid.UUID) *BlurtUpdateOne {
	buo.mutation.RemoveLikdUserIDs(ids...)
	return buo
}

// RemoveLikdUsers removes "likd_users" edges to User entities.
func (buo *BlurtUpdateOne) RemoveLikdUsers(u ...*User) *BlurtUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.RemoveLikdUserIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (buo *BlurtUpdateOne) ClearAuthor() *BlurtUpdateOne {
	buo.mutation.ClearAuthor()
	return buo
}

// Where appends a list predicates to the BlurtUpdate builder.
func (buo *BlurtUpdateOne) Where(ps ...predicate.Blurt) *BlurtUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlurtUpdateOne) Select(field string, fields ...string) *BlurtUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blurt entity.
func (buo *BlurtUpdateOne) Save(ctx context.Context) (*Blurt, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlurtUpdateOne) SaveX(ctx context.Context) *Blurt {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlurtUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlurtUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BlurtUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdateTime(); !ok {
		v := blurt.UpdateDefaultUpdateTime()
		buo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlurtUpdateOne) check() error {
	if v, ok := buo.mutation.Content(); ok {
		if err := blurt.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Blurt.content": %w`, err)}
		}
	}
	return nil
}

func (buo *BlurtUpdateOne) sqlSave(ctx context.Context) (_node *Blurt, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blurt.Table, blurt.Columns, sqlgraph.NewFieldSpec(blurt.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blurt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blurt.FieldID)
		for _, f := range fields {
			if !blurt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blurt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.SetField(blurt.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Content(); ok {
		_spec.SetField(blurt.FieldContent, field.TypeString, value)
	}
	if buo.mutation.LikdUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blurt.LikdUsersTable,
			Columns: blurt.LikdUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedLikdUsersIDs(); len(nodes) > 0 && !buo.mutation.LikdUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blurt.LikdUsersTable,
			Columns: blurt.LikdUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LikdUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blurt.LikdUsersTable,
			Columns: blurt.LikdUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blurt.AuthorTable,
			Columns: []string{blurt.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blurt.AuthorTable,
			Columns: []string{blurt.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Blurt{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blurt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
