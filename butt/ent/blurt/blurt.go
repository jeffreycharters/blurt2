// Code generated by ent, DO NOT EDIT.

package blurt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the blurt type in the database.
	Label = "blurt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeLikdUsers holds the string denoting the likd_users edge name in mutations.
	EdgeLikdUsers = "likd_users"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeLiks holds the string denoting the liks edge name in mutations.
	EdgeLiks = "liks"
	// Table holds the table name of the blurt in the database.
	Table = "blurts"
	// LikdUsersTable is the table that holds the likd_users relation/edge. The primary key declared below.
	LikdUsersTable = "liks"
	// LikdUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	LikdUsersInverseTable = "users"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "blurts"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_blurts"
	// LiksTable is the table that holds the liks relation/edge.
	LiksTable = "liks"
	// LiksInverseTable is the table name for the Lik entity.
	// It exists in this package in order to avoid circular dependency with the "lik" package.
	LiksInverseTable = "liks"
	// LiksColumn is the table column denoting the liks relation/edge.
	LiksColumn = "blurt_id"
)

// Columns holds all SQL columns for blurt fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "blurts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_blurts",
}

var (
	// LikdUsersPrimaryKey and LikdUsersColumn2 are the table columns denoting the
	// primary key for the likd_users relation (M2M).
	LikdUsersPrimaryKey = []string{"user_id", "blurt_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Blurt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByLikdUsersCount orders the results by likd_users count.
func ByLikdUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikdUsersStep(), opts...)
	}
}

// ByLikdUsers orders the results by likd_users terms.
func ByLikdUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikdUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByLiksCount orders the results by liks count.
func ByLiksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLiksStep(), opts...)
	}
}

// ByLiks orders the results by liks terms.
func ByLiks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLiksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLikdUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikdUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LikdUsersTable, LikdUsersPrimaryKey...),
	)
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newLiksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LiksInverseTable, LiksColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, LiksTable, LiksColumn),
	)
}
