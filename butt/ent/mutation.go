// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jeffreycharters/blurt/ent/blurt"
	"github.com/jeffreycharters/blurt/ent/lik"
	"github.com/jeffreycharters/blurt/ent/predicate"
	"github.com/jeffreycharters/blurt/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlurt = "Blurt"
	TypeLik   = "Lik"
	TypeUser  = "User"
)

// BlurtMutation represents an operation that mutates the Blurt nodes in the graph.
type BlurtMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	create_time       *time.Time
	update_time       *time.Time
	content           *string
	clearedFields     map[string]struct{}
	likd_users        map[uuid.UUID]struct{}
	removedlikd_users map[uuid.UUID]struct{}
	clearedlikd_users bool
	author            *uuid.UUID
	clearedauthor     bool
	done              bool
	oldValue          func(context.Context) (*Blurt, error)
	predicates        []predicate.Blurt
}

var _ ent.Mutation = (*BlurtMutation)(nil)

// blurtOption allows management of the mutation configuration using functional options.
type blurtOption func(*BlurtMutation)

// newBlurtMutation creates new mutation for the Blurt entity.
func newBlurtMutation(c config, op Op, opts ...blurtOption) *BlurtMutation {
	m := &BlurtMutation{
		config:        c,
		op:            op,
		typ:           TypeBlurt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlurtID sets the ID field of the mutation.
func withBlurtID(id uuid.UUID) blurtOption {
	return func(m *BlurtMutation) {
		var (
			err   error
			once  sync.Once
			value *Blurt
		)
		m.oldValue = func(ctx context.Context) (*Blurt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Blurt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlurt sets the old Blurt of the mutation.
func withBlurt(node *Blurt) blurtOption {
	return func(m *BlurtMutation) {
		m.oldValue = func(context.Context) (*Blurt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlurtMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlurtMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Blurt entities.
func (m *BlurtMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlurtMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlurtMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Blurt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *BlurtMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BlurtMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Blurt entity.
// If the Blurt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlurtMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BlurtMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BlurtMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BlurtMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Blurt entity.
// If the Blurt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlurtMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BlurtMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetContent sets the "content" field.
func (m *BlurtMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *BlurtMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Blurt entity.
// If the Blurt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlurtMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *BlurtMutation) ResetContent() {
	m.content = nil
}

// AddLikdUserIDs adds the "likd_users" edge to the User entity by ids.
func (m *BlurtMutation) AddLikdUserIDs(ids ...uuid.UUID) {
	if m.likd_users == nil {
		m.likd_users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.likd_users[ids[i]] = struct{}{}
	}
}

// ClearLikdUsers clears the "likd_users" edge to the User entity.
func (m *BlurtMutation) ClearLikdUsers() {
	m.clearedlikd_users = true
}

// LikdUsersCleared reports if the "likd_users" edge to the User entity was cleared.
func (m *BlurtMutation) LikdUsersCleared() bool {
	return m.clearedlikd_users
}

// RemoveLikdUserIDs removes the "likd_users" edge to the User entity by IDs.
func (m *BlurtMutation) RemoveLikdUserIDs(ids ...uuid.UUID) {
	if m.removedlikd_users == nil {
		m.removedlikd_users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.likd_users, ids[i])
		m.removedlikd_users[ids[i]] = struct{}{}
	}
}

// RemovedLikdUsers returns the removed IDs of the "likd_users" edge to the User entity.
func (m *BlurtMutation) RemovedLikdUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedlikd_users {
		ids = append(ids, id)
	}
	return
}

// LikdUsersIDs returns the "likd_users" edge IDs in the mutation.
func (m *BlurtMutation) LikdUsersIDs() (ids []uuid.UUID) {
	for id := range m.likd_users {
		ids = append(ids, id)
	}
	return
}

// ResetLikdUsers resets all changes to the "likd_users" edge.
func (m *BlurtMutation) ResetLikdUsers() {
	m.likd_users = nil
	m.clearedlikd_users = false
	m.removedlikd_users = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *BlurtMutation) SetAuthorID(id uuid.UUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *BlurtMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *BlurtMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *BlurtMutation) AuthorID() (id uuid.UUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *BlurtMutation) AuthorIDs() (ids []uuid.UUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *BlurtMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Where appends a list predicates to the BlurtMutation builder.
func (m *BlurtMutation) Where(ps ...predicate.Blurt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlurtMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlurtMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Blurt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlurtMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlurtMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Blurt).
func (m *BlurtMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlurtMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, blurt.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, blurt.FieldUpdateTime)
	}
	if m.content != nil {
		fields = append(fields, blurt.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlurtMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blurt.FieldCreateTime:
		return m.CreateTime()
	case blurt.FieldUpdateTime:
		return m.UpdateTime()
	case blurt.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlurtMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blurt.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case blurt.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case blurt.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Blurt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlurtMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blurt.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case blurt.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case blurt.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Blurt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlurtMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlurtMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlurtMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Blurt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlurtMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlurtMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlurtMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Blurt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlurtMutation) ResetField(name string) error {
	switch name {
	case blurt.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case blurt.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case blurt.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Blurt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlurtMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.likd_users != nil {
		edges = append(edges, blurt.EdgeLikdUsers)
	}
	if m.author != nil {
		edges = append(edges, blurt.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlurtMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case blurt.EdgeLikdUsers:
		ids := make([]ent.Value, 0, len(m.likd_users))
		for id := range m.likd_users {
			ids = append(ids, id)
		}
		return ids
	case blurt.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlurtMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlikd_users != nil {
		edges = append(edges, blurt.EdgeLikdUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlurtMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case blurt.EdgeLikdUsers:
		ids := make([]ent.Value, 0, len(m.removedlikd_users))
		for id := range m.removedlikd_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlurtMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlikd_users {
		edges = append(edges, blurt.EdgeLikdUsers)
	}
	if m.clearedauthor {
		edges = append(edges, blurt.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlurtMutation) EdgeCleared(name string) bool {
	switch name {
	case blurt.EdgeLikdUsers:
		return m.clearedlikd_users
	case blurt.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlurtMutation) ClearEdge(name string) error {
	switch name {
	case blurt.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Blurt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlurtMutation) ResetEdge(name string) error {
	switch name {
	case blurt.EdgeLikdUsers:
		m.ResetLikdUsers()
		return nil
	case blurt.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Blurt edge %s", name)
}

// LikMutation represents an operation that mutates the Lik nodes in the graph.
type LikMutation struct {
	config
	op            Op
	typ           string
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	blurt         *uuid.UUID
	clearedblurt  bool
	done          bool
	oldValue      func(context.Context) (*Lik, error)
	predicates    []predicate.Lik
}

var _ ent.Mutation = (*LikMutation)(nil)

// likOption allows management of the mutation configuration using functional options.
type likOption func(*LikMutation)

// newLikMutation creates new mutation for the Lik entity.
func newLikMutation(c config, op Op, opts ...likOption) *LikMutation {
	m := &LikMutation{
		config:        c,
		op:            op,
		typ:           TypeLik,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *LikMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LikMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LikMutation) ResetUserID() {
	m.user = nil
}

// SetBlurtID sets the "blurt_id" field.
func (m *LikMutation) SetBlurtID(u uuid.UUID) {
	m.blurt = &u
}

// BlurtID returns the value of the "blurt_id" field in the mutation.
func (m *LikMutation) BlurtID() (r uuid.UUID, exists bool) {
	v := m.blurt
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlurtID resets all changes to the "blurt_id" field.
func (m *LikMutation) ResetBlurtID() {
	m.blurt = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *LikMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[lik.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LikMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LikMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LikMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearBlurt clears the "blurt" edge to the Blurt entity.
func (m *LikMutation) ClearBlurt() {
	m.clearedblurt = true
	m.clearedFields[lik.FieldBlurtID] = struct{}{}
}

// BlurtCleared reports if the "blurt" edge to the Blurt entity was cleared.
func (m *LikMutation) BlurtCleared() bool {
	return m.clearedblurt
}

// BlurtIDs returns the "blurt" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlurtID instead. It exists only for internal usage by the builders.
func (m *LikMutation) BlurtIDs() (ids []uuid.UUID) {
	if id := m.blurt; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlurt resets all changes to the "blurt" edge.
func (m *LikMutation) ResetBlurt() {
	m.blurt = nil
	m.clearedblurt = false
}

// Where appends a list predicates to the LikMutation builder.
func (m *LikMutation) Where(ps ...predicate.Lik) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LikMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LikMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Lik, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LikMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LikMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Lik).
func (m *LikMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user != nil {
		fields = append(fields, lik.FieldUserID)
	}
	if m.blurt != nil {
		fields = append(fields, lik.FieldBlurtID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lik.FieldUserID:
		return m.UserID()
	case lik.FieldBlurtID:
		return m.BlurtID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Lik does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lik.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case lik.FieldBlurtID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlurtID(v)
		return nil
	}
	return fmt.Errorf("unknown Lik field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lik numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Lik nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikMutation) ResetField(name string) error {
	switch name {
	case lik.FieldUserID:
		m.ResetUserID()
		return nil
	case lik.FieldBlurtID:
		m.ResetBlurtID()
		return nil
	}
	return fmt.Errorf("unknown Lik field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, lik.EdgeUser)
	}
	if m.blurt != nil {
		edges = append(edges, lik.EdgeBlurt)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lik.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case lik.EdgeBlurt:
		if id := m.blurt; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, lik.EdgeUser)
	}
	if m.clearedblurt {
		edges = append(edges, lik.EdgeBlurt)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikMutation) EdgeCleared(name string) bool {
	switch name {
	case lik.EdgeUser:
		return m.cleareduser
	case lik.EdgeBlurt:
		return m.clearedblurt
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikMutation) ClearEdge(name string) error {
	switch name {
	case lik.EdgeUser:
		m.ClearUser()
		return nil
	case lik.EdgeBlurt:
		m.ClearBlurt()
		return nil
	}
	return fmt.Errorf("unknown Lik unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikMutation) ResetEdge(name string) error {
	switch name {
	case lik.EdgeUser:
		m.ResetUser()
		return nil
	case lik.EdgeBlurt:
		m.ResetBlurt()
		return nil
	}
	return fmt.Errorf("unknown Lik edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	create_time        *time.Time
	update_time        *time.Time
	username           *string
	clearedFields      map[string]struct{}
	blurts             map[uuid.UUID]struct{}
	removedblurts      map[uuid.UUID]struct{}
	clearedblurts      bool
	likd_blurts        map[uuid.UUID]struct{}
	removedlikd_blurts map[uuid.UUID]struct{}
	clearedlikd_blurts bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// AddBlurtIDs adds the "blurts" edge to the Blurt entity by ids.
func (m *UserMutation) AddBlurtIDs(ids ...uuid.UUID) {
	if m.blurts == nil {
		m.blurts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.blurts[ids[i]] = struct{}{}
	}
}

// ClearBlurts clears the "blurts" edge to the Blurt entity.
func (m *UserMutation) ClearBlurts() {
	m.clearedblurts = true
}

// BlurtsCleared reports if the "blurts" edge to the Blurt entity was cleared.
func (m *UserMutation) BlurtsCleared() bool {
	return m.clearedblurts
}

// RemoveBlurtIDs removes the "blurts" edge to the Blurt entity by IDs.
func (m *UserMutation) RemoveBlurtIDs(ids ...uuid.UUID) {
	if m.removedblurts == nil {
		m.removedblurts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.blurts, ids[i])
		m.removedblurts[ids[i]] = struct{}{}
	}
}

// RemovedBlurts returns the removed IDs of the "blurts" edge to the Blurt entity.
func (m *UserMutation) RemovedBlurtsIDs() (ids []uuid.UUID) {
	for id := range m.removedblurts {
		ids = append(ids, id)
	}
	return
}

// BlurtsIDs returns the "blurts" edge IDs in the mutation.
func (m *UserMutation) BlurtsIDs() (ids []uuid.UUID) {
	for id := range m.blurts {
		ids = append(ids, id)
	}
	return
}

// ResetBlurts resets all changes to the "blurts" edge.
func (m *UserMutation) ResetBlurts() {
	m.blurts = nil
	m.clearedblurts = false
	m.removedblurts = nil
}

// AddLikdBlurtIDs adds the "likd_blurts" edge to the Blurt entity by ids.
func (m *UserMutation) AddLikdBlurtIDs(ids ...uuid.UUID) {
	if m.likd_blurts == nil {
		m.likd_blurts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.likd_blurts[ids[i]] = struct{}{}
	}
}

// ClearLikdBlurts clears the "likd_blurts" edge to the Blurt entity.
func (m *UserMutation) ClearLikdBlurts() {
	m.clearedlikd_blurts = true
}

// LikdBlurtsCleared reports if the "likd_blurts" edge to the Blurt entity was cleared.
func (m *UserMutation) LikdBlurtsCleared() bool {
	return m.clearedlikd_blurts
}

// RemoveLikdBlurtIDs removes the "likd_blurts" edge to the Blurt entity by IDs.
func (m *UserMutation) RemoveLikdBlurtIDs(ids ...uuid.UUID) {
	if m.removedlikd_blurts == nil {
		m.removedlikd_blurts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.likd_blurts, ids[i])
		m.removedlikd_blurts[ids[i]] = struct{}{}
	}
}

// RemovedLikdBlurts returns the removed IDs of the "likd_blurts" edge to the Blurt entity.
func (m *UserMutation) RemovedLikdBlurtsIDs() (ids []uuid.UUID) {
	for id := range m.removedlikd_blurts {
		ids = append(ids, id)
	}
	return
}

// LikdBlurtsIDs returns the "likd_blurts" edge IDs in the mutation.
func (m *UserMutation) LikdBlurtsIDs() (ids []uuid.UUID) {
	for id := range m.likd_blurts {
		ids = append(ids, id)
	}
	return
}

// ResetLikdBlurts resets all changes to the "likd_blurts" edge.
func (m *UserMutation) ResetLikdBlurts() {
	m.likd_blurts = nil
	m.clearedlikd_blurts = false
	m.removedlikd_blurts = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.blurts != nil {
		edges = append(edges, user.EdgeBlurts)
	}
	if m.likd_blurts != nil {
		edges = append(edges, user.EdgeLikdBlurts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBlurts:
		ids := make([]ent.Value, 0, len(m.blurts))
		for id := range m.blurts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikdBlurts:
		ids := make([]ent.Value, 0, len(m.likd_blurts))
		for id := range m.likd_blurts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedblurts != nil {
		edges = append(edges, user.EdgeBlurts)
	}
	if m.removedlikd_blurts != nil {
		edges = append(edges, user.EdgeLikdBlurts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBlurts:
		ids := make([]ent.Value, 0, len(m.removedblurts))
		for id := range m.removedblurts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikdBlurts:
		ids := make([]ent.Value, 0, len(m.removedlikd_blurts))
		for id := range m.removedlikd_blurts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedblurts {
		edges = append(edges, user.EdgeBlurts)
	}
	if m.clearedlikd_blurts {
		edges = append(edges, user.EdgeLikdBlurts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeBlurts:
		return m.clearedblurts
	case user.EdgeLikdBlurts:
		return m.clearedlikd_blurts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeBlurts:
		m.ResetBlurts()
		return nil
	case user.EdgeLikdBlurts:
		m.ResetLikdBlurts()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
