// Code generated by ent, DO NOT EDIT.

package lik

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jeffreycharters/blurt/ent/predicate"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldEQ(FieldUserID, v))
}

// BlurtID applies equality check predicate on the "blurt_id" field. It's identical to BlurtIDEQ.
func BlurtID(v uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldEQ(FieldBlurtID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldNotIn(FieldUserID, vs...))
}

// BlurtIDEQ applies the EQ predicate on the "blurt_id" field.
func BlurtIDEQ(v uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldEQ(FieldBlurtID, v))
}

// BlurtIDNEQ applies the NEQ predicate on the "blurt_id" field.
func BlurtIDNEQ(v uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldNEQ(FieldBlurtID, v))
}

// BlurtIDIn applies the In predicate on the "blurt_id" field.
func BlurtIDIn(vs ...uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldIn(FieldBlurtID, vs...))
}

// BlurtIDNotIn applies the NotIn predicate on the "blurt_id" field.
func BlurtIDNotIn(vs ...uuid.UUID) predicate.Lik {
	return predicate.Lik(sql.FieldNotIn(FieldBlurtID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Lik {
	return predicate.Lik(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Lik {
	return predicate.Lik(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlurt applies the HasEdge predicate on the "blurt" edge.
func HasBlurt() predicate.Lik {
	return predicate.Lik(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, BlurtColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, BlurtTable, BlurtColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlurtWith applies the HasEdge predicate on the "blurt" edge with a given conditions (other predicates).
func HasBlurtWith(preds ...predicate.Blurt) predicate.Lik {
	return predicate.Lik(func(s *sql.Selector) {
		step := newBlurtStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lik) predicate.Lik {
	return predicate.Lik(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lik) predicate.Lik {
	return predicate.Lik(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lik) predicate.Lik {
	return predicate.Lik(sql.NotPredicates(p))
}
