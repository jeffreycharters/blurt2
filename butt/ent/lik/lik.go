// Code generated by ent, DO NOT EDIT.

package lik

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lik type in the database.
	Label = "lik"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBlurtID holds the string denoting the blurt_id field in the database.
	FieldBlurtID = "blurt_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBlurt holds the string denoting the blurt edge name in mutations.
	EdgeBlurt = "blurt"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// BlurtFieldID holds the string denoting the ID field of the Blurt.
	BlurtFieldID = "id"
	// Table holds the table name of the lik in the database.
	Table = "liks"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "liks"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// BlurtTable is the table that holds the blurt relation/edge.
	BlurtTable = "liks"
	// BlurtInverseTable is the table name for the Blurt entity.
	// It exists in this package in order to avoid circular dependency with the "blurt" package.
	BlurtInverseTable = "blurts"
	// BlurtColumn is the table column denoting the blurt relation/edge.
	BlurtColumn = "blurt_id"
)

// Columns holds all SQL columns for lik fields.
var Columns = []string{
	FieldUserID,
	FieldBlurtID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Lik queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBlurtID orders the results by the blurt_id field.
func ByBlurtID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlurtID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlurtField orders the results by blurt field.
func ByBlurtField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlurtStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newBlurtStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, BlurtColumn),
		sqlgraph.To(BlurtInverseTable, BlurtFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlurtTable, BlurtColumn),
	)
}
