// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jeffreycharters/blurt/ent/blurt"
	"github.com/jeffreycharters/blurt/ent/lik"
	"github.com/jeffreycharters/blurt/ent/user"
)

// Lik is the model entity for the Lik schema.
type Lik struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// BlurtID holds the value of the "blurt_id" field.
	BlurtID uuid.UUID `json:"blurt_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikQuery when eager-loading is set.
	Edges        LikEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LikEdges holds the relations/edges for other nodes in the graph.
type LikEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Blurt holds the value of the blurt edge.
	Blurt *Blurt `json:"blurt,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BlurtOrErr returns the Blurt value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikEdges) BlurtOrErr() (*Blurt, error) {
	if e.Blurt != nil {
		return e.Blurt, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: blurt.Label}
	}
	return nil, &NotLoadedError{edge: "blurt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lik) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lik.FieldUserID, lik.FieldBlurtID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lik fields.
func (l *Lik) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lik.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				l.UserID = *value
			}
		case lik.FieldBlurtID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field blurt_id", values[i])
			} else if value != nil {
				l.BlurtID = *value
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lik.
// This includes values selected through modifiers, order, etc.
func (l *Lik) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Lik entity.
func (l *Lik) QueryUser() *UserQuery {
	return NewLikClient(l.config).QueryUser(l)
}

// QueryBlurt queries the "blurt" edge of the Lik entity.
func (l *Lik) QueryBlurt() *BlurtQuery {
	return NewLikClient(l.config).QueryBlurt(l)
}

// Update returns a builder for updating this Lik.
// Note that you need to call Lik.Unwrap() before calling this method if this Lik
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lik) Update() *LikUpdateOne {
	return NewLikClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lik entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lik) Unwrap() *Lik {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lik is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lik) String() string {
	var builder strings.Builder
	builder.WriteString("Lik(")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", l.UserID))
	builder.WriteString(", ")
	builder.WriteString("blurt_id=")
	builder.WriteString(fmt.Sprintf("%v", l.BlurtID))
	builder.WriteByte(')')
	return builder.String()
}

// Liks is a parsable slice of Lik.
type Liks []*Lik
