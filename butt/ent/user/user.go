// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// EdgeBlurts holds the string denoting the blurts edge name in mutations.
	EdgeBlurts = "blurts"
	// EdgeLikdBlurts holds the string denoting the likd_blurts edge name in mutations.
	EdgeLikdBlurts = "likd_blurts"
	// EdgeLiks holds the string denoting the liks edge name in mutations.
	EdgeLiks = "liks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BlurtsTable is the table that holds the blurts relation/edge.
	BlurtsTable = "blurts"
	// BlurtsInverseTable is the table name for the Blurt entity.
	// It exists in this package in order to avoid circular dependency with the "blurt" package.
	BlurtsInverseTable = "blurts"
	// BlurtsColumn is the table column denoting the blurts relation/edge.
	BlurtsColumn = "user_blurts"
	// LikdBlurtsTable is the table that holds the likd_blurts relation/edge. The primary key declared below.
	LikdBlurtsTable = "liks"
	// LikdBlurtsInverseTable is the table name for the Blurt entity.
	// It exists in this package in order to avoid circular dependency with the "blurt" package.
	LikdBlurtsInverseTable = "blurts"
	// LiksTable is the table that holds the liks relation/edge.
	LiksTable = "liks"
	// LiksInverseTable is the table name for the Lik entity.
	// It exists in this package in order to avoid circular dependency with the "lik" package.
	LiksInverseTable = "liks"
	// LiksColumn is the table column denoting the liks relation/edge.
	LiksColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUsername,
}

var (
	// LikdBlurtsPrimaryKey and LikdBlurtsColumn2 are the table columns denoting the
	// primary key for the likd_blurts relation (M2M).
	LikdBlurtsPrimaryKey = []string{"user_id", "blurt_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByBlurtsCount orders the results by blurts count.
func ByBlurtsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlurtsStep(), opts...)
	}
}

// ByBlurts orders the results by blurts terms.
func ByBlurts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlurtsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikdBlurtsCount orders the results by likd_blurts count.
func ByLikdBlurtsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikdBlurtsStep(), opts...)
	}
}

// ByLikdBlurts orders the results by likd_blurts terms.
func ByLikdBlurts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikdBlurtsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLiksCount orders the results by liks count.
func ByLiksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLiksStep(), opts...)
	}
}

// ByLiks orders the results by liks terms.
func ByLiks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLiksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlurtsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlurtsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlurtsTable, BlurtsColumn),
	)
}
func newLikdBlurtsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikdBlurtsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LikdBlurtsTable, LikdBlurtsPrimaryKey...),
	)
}
func newLiksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LiksInverseTable, LiksColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, LiksTable, LiksColumn),
	)
}
